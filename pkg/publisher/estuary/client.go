// Package estuary provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package estuary

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CollectionsCollection defines model for collections.Collection.
type CollectionsCollection struct {
	Cid         *string `json:"cid,omitempty"`
	CreatedAt   *string `json:"createdAt,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	UserId      *int    `json:"userId,omitempty"`
	Uuid        *string `json:"uuid,omitempty"`
}

// MainChannelIDParam defines model for main.ChannelIDParam.
type MainChannelIDParam struct {
	Id        *int    `json:"id,omitempty"`
	Initiator *string `json:"initiator,omitempty"`
	Responder *string `json:"responder,omitempty"`
}

// MainCreateCollectionBody defines model for main.createCollectionBody.
type MainCreateCollectionBody struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// MainDeleteContentFromCollectionBody defines model for main.deleteContentFromCollectionBody.
type MainDeleteContentFromCollectionBody struct {
	By    *string `json:"by,omitempty"`
	Value *string `json:"value,omitempty"`
}

// MainEstimateDealBody defines model for main.estimateDealBody.
type MainEstimateDealBody struct {
	DurationBlks *int  `json:"durationBlks,omitempty"`
	Replication  *int  `json:"replication,omitempty"`
	Size         *int  `json:"size,omitempty"`
	Verified     *bool `json:"verified,omitempty"`
}

// MainGetApiKeysResp defines model for main.getApiKeysResp.
type MainGetApiKeysResp struct {
	Expiry *string `json:"expiry,omitempty"`
	Token  *string `json:"token,omitempty"`
}

// MainImportDealBody defines model for main.importDealBody.
type MainImportDealBody struct {
	Coluuid *string `json:"coluuid,omitempty"`
	DealIDs *[]int  `json:"dealIDs,omitempty"`
	Dir     *string `json:"dir,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// UtilContentAddIpfsBody defines model for util.ContentAddIpfsBody.
type UtilContentAddIpfsBody struct {
	Coluuid  *string   `json:"coluuid,omitempty"`
	Dir      *string   `json:"dir,omitempty"`
	Filename *string   `json:"filename,omitempty"`
	Peers    *[]string `json:"peers,omitempty"`
	Root     *string   `json:"root,omitempty"`
}

// UtilContentAddResponse defines model for util.ContentAddResponse.
type UtilContentAddResponse struct {
	Cid          *string   `json:"cid,omitempty"`
	EstuaryId    *int      `json:"estuaryId,omitempty"`
	Providers    *[]string `json:"providers,omitempty"`
	RetrievalUrl *string   `json:"retrieval_url,omitempty"`
}

// UtilContentCreateBody defines model for util.ContentCreateBody.
type UtilContentCreateBody struct {
	Coluuid  *string `json:"coluuid,omitempty"`
	Dir      *string `json:"dir,omitempty"`
	Location *string `json:"location,omitempty"`
	Name     *string `json:"name,omitempty"`
	Root     *string `json:"root,omitempty"`
	Type     *int    `json:"type,omitempty"`
}

// UtilHttpError defines model for util.HttpError.
type UtilHttpError struct {
	Code    *int    `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Reason  *string `json:"reason,omitempty"`
}

// PostAdminAutoretrieveInitFormdataBody defines parameters for PostAdminAutoretrieveInit.
type PostAdminAutoretrieveInitFormdataBody struct {
	// Addresses Autoretrieve's comma-separated list of addresses
	Addresses string `json:"addresses"`

	// PubKey Autoretrieve's public key
	PubKey string `json:"pubKey"`
}

// DeleteAdminPeeringPeersJSONBody defines parameters for DeleteAdminPeeringPeers.
type DeleteAdminPeeringPeersJSONBody = []string

// PostAutoretrieveHeartbeatParams defines parameters for PostAutoretrieveHeartbeat.
type PostAutoretrieveHeartbeatParams struct {
	// Token Autoretrieve's auth token
	Token string `json:"token"`
}

// PostCollectionsFsAddParams defines parameters for PostCollectionsFsAdd.
type PostCollectionsFsAddParams struct {
	// Coluuid Collection ID
	Coluuid string `form:"coluuid" json:"coluuid"`

	// Content Content
	Content string `form:"content" json:"content"`

	// Path Path to file
	Path string `form:"path" json:"path"`
}

// GetCollectionsColuuidParams defines parameters for GetCollectionsColuuid.
type GetCollectionsColuuidParams struct {
	// Dir Directory
	Dir *string `form:"dir,omitempty" json:"dir,omitempty"`
}

// PostCollectionsColuuidJSONBody defines parameters for PostCollectionsColuuid.
type PostCollectionsColuuidJSONBody = []int

// PostContentAddMultipartBody defines parameters for PostContentAdd.
type PostContentAddMultipartBody struct {
	// Data File to upload
	Data openapi_types.File `json:"data"`

	// Filename Filenam to use for upload
	Filename *string `json:"filename,omitempty"`
}

// PostContentAddParams defines parameters for PostContentAdd.
type PostContentAddParams struct {
	// Coluuid Collection UUID
	Coluuid *string `form:"coluuid,omitempty" json:"coluuid,omitempty"`

	// Replication Replication value
	Replication *int `form:"replication,omitempty" json:"replication,omitempty"`

	// IgnoreDupes Ignore Dupes true/false
	IgnoreDupes *string `form:"ignore-dupes,omitempty" json:"ignore-dupes,omitempty"`

	// LazyProvide Lazy Provide true/false
	LazyProvide *string `form:"lazy-provide,omitempty" json:"lazy-provide,omitempty"`

	// Dir Directory
	Dir *string `form:"dir,omitempty" json:"dir,omitempty"`
}

// PostContentAddCarJSONBody defines parameters for PostContentAddCar.
type PostContentAddCarJSONBody = string

// PostContentAddCarParams defines parameters for PostContentAddCar.
type PostContentAddCarParams struct {
	// IgnoreDupes Ignore Dupes
	IgnoreDupes *string `form:"ignore-dupes,omitempty" json:"ignore-dupes,omitempty"`

	// Filename Filename
	Filename *string `form:"filename,omitempty" json:"filename,omitempty"`
}

// PostContentAddIpfsParams defines parameters for PostContentAddIpfs.
type PostContentAddIpfsParams struct {
	// IgnoreDupes Ignore Dupes
	IgnoreDupes *string `form:"ignore-dupes,omitempty" json:"ignore-dupes,omitempty"`
}

// GetContentAllDealsParams defines parameters for GetContentAllDeals.
type GetContentAllDealsParams struct {
	// Begin Begin
	Begin string `form:"begin" json:"begin"`

	// Duration Duration
	Duration string `form:"duration" json:"duration"`

	// All All
	All string `form:"all" json:"all"`
}

// PostContentCreateParams defines parameters for PostContentCreate.
type PostContentCreateParams struct {
	// IgnoreDupes Ignore Dupes
	IgnoreDupes *string `form:"ignore-dupes,omitempty" json:"ignore-dupes,omitempty"`
}

// GetContentDealsParams defines parameters for GetContentDeals.
type GetContentDealsParams struct {
	// Limit Limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetContentStatsParams defines parameters for GetContentStats.
type GetContentStatsParams struct {
	// Limit limit
	Limit string `form:"limit" json:"limit"`

	// Offset offset
	Offset string `form:"offset" json:"offset"`
}

// PostDealsMakeMinerJSONBody defines parameters for PostDealsMakeMiner.
type PostDealsMakeMinerJSONBody = string

// PostPinningPinsJSONBody defines parameters for PostPinningPins.
type PostPinningPinsJSONBody struct {
	Cid  interface{} `json:"cid"`
	Name interface{} `json:"name"`
}

// GetPublicMinersDealsMinerParams defines parameters for GetPublicMinersDealsMiner.
type GetPublicMinersDealsMinerParams struct {
	// IgnoreFailed Ignore Failed
	IgnoreFailed *string `form:"ignore-failed,omitempty" json:"ignore-failed,omitempty"`
}

// PostUserApiKeysParams defines parameters for PostUserApiKeys.
type PostUserApiKeysParams struct {
	// Expiry Expiration - Expiration - Valid time units are ns, us (or Âµs),  ms,  s,  m,  h.  for  example  300h
	Expiry *string `form:"expiry,omitempty" json:"expiry,omitempty"`

	// Perms Permissions -- currently unused
	Perms *string `form:"perms,omitempty" json:"perms,omitempty"`
}

// PostAdminAutoretrieveInitFormdataRequestBody defines body for PostAdminAutoretrieveInit for application/x-www-form-urlencoded ContentType.
type PostAdminAutoretrieveInitFormdataRequestBody PostAdminAutoretrieveInitFormdataBody

// DeleteAdminPeeringPeersJSONRequestBody defines body for DeleteAdminPeeringPeers for application/json ContentType.
type DeleteAdminPeeringPeersJSONRequestBody = DeleteAdminPeeringPeersJSONBody

// PostCollectionsJSONRequestBody defines body for PostCollections for application/json ContentType.
type PostCollectionsJSONRequestBody = MainCreateCollectionBody

// PostCollectionsColuuidJSONRequestBody defines body for PostCollectionsColuuid for application/json ContentType.
type PostCollectionsColuuidJSONRequestBody = PostCollectionsColuuidJSONBody

// DeleteCollectionsColuuidContentsJSONRequestBody defines body for DeleteCollectionsColuuidContents for application/json ContentType.
type DeleteCollectionsColuuidContentsJSONRequestBody = MainDeleteContentFromCollectionBody

// PostContentAddMultipartRequestBody defines body for PostContentAdd for multipart/form-data ContentType.
type PostContentAddMultipartRequestBody PostContentAddMultipartBody

// PostContentAddCarJSONRequestBody defines body for PostContentAddCar for application/json ContentType.
type PostContentAddCarJSONRequestBody = PostContentAddCarJSONBody

// PostContentAddIpfsJSONRequestBody defines body for PostContentAddIpfs for application/json ContentType.
type PostContentAddIpfsJSONRequestBody = UtilContentAddIpfsBody

// PostContentCreateJSONRequestBody defines body for PostContentCreate for application/json ContentType.
type PostContentCreateJSONRequestBody = UtilContentCreateBody

// PostContentImportdealJSONRequestBody defines body for PostContentImportdeal for application/json ContentType.
type PostContentImportdealJSONRequestBody = MainImportDealBody

// PostDealEstimateJSONRequestBody defines body for PostDealEstimate for application/json ContentType.
type PostDealEstimateJSONRequestBody = MainEstimateDealBody

// PostDealTransferStatusJSONRequestBody defines body for PostDealTransferStatus for application/json ContentType.
type PostDealTransferStatusJSONRequestBody = MainChannelIDParam

// PostDealsMakeMinerJSONRequestBody defines body for PostDealsMakeMiner for application/json ContentType.
type PostDealsMakeMinerJSONRequestBody = PostDealsMakeMinerJSONBody

// PostPinningPinsJSONRequestBody defines body for PostPinningPins for application/json ContentType.
type PostPinningPinsJSONRequestBody PostPinningPinsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAdminAutoretrieveInit request with any body
	PostAdminAutoretrieveInitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminAutoretrieveInitWithFormdataBody(ctx context.Context, body PostAdminAutoretrieveInitFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminAutoretrieveList request
	GetAdminAutoretrieveList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminPeeringPeers request with any body
	DeleteAdminPeeringPeersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminPeeringPeers(ctx context.Context, body DeleteAdminPeeringPeersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminPeeringPeers request
	GetAdminPeeringPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminPeeringPeers request
	PostAdminPeeringPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminPeeringStart request
	PostAdminPeeringStart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminPeeringStatus request
	GetAdminPeeringStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminPeeringStop request
	PostAdminPeeringStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminSystemConfig request
	GetAdminSystemConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminUsers request
	GetAdminUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAutoretrieveHeartbeat request
	PostAutoretrieveHeartbeat(ctx context.Context, params *PostAutoretrieveHeartbeatParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollections request
	GetCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollections request with any body
	PostCollectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollections(ctx context.Context, body PostCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsFsAdd request
	PostCollectionsFsAdd(ctx context.Context, params *PostCollectionsFsAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCollectionsColuuid request
	DeleteCollectionsColuuid(ctx context.Context, coluuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionsColuuid request
	GetCollectionsColuuid(ctx context.Context, coluuid string, params *GetCollectionsColuuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsColuuid request with any body
	PostCollectionsColuuidWithBody(ctx context.Context, coluuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCollectionsColuuid(ctx context.Context, coluuid string, body PostCollectionsColuuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCollectionsColuuidCommit request
	PostCollectionsColuuidCommit(ctx context.Context, coluuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCollectionsColuuidContents request with any body
	DeleteCollectionsColuuidContentsWithBody(ctx context.Context, coluuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCollectionsColuuidContents(ctx context.Context, coluuid string, body DeleteCollectionsColuuidContentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContentAdd request with any body
	PostContentAddWithBody(ctx context.Context, params *PostContentAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContentAddCar request with any body
	PostContentAddCarWithBody(ctx context.Context, params *PostContentAddCarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContentAddCar(ctx context.Context, params *PostContentAddCarParams, body PostContentAddCarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContentAddIpfs request with any body
	PostContentAddIpfsWithBody(ctx context.Context, params *PostContentAddIpfsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContentAddIpfs(ctx context.Context, params *PostContentAddIpfsParams, body PostContentAddIpfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentAggregatedContent request
	GetContentAggregatedContent(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentAllDeals request
	GetContentAllDeals(ctx context.Context, params *GetContentAllDealsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentBwUsageContent request
	GetContentBwUsageContent(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContentCreate request with any body
	PostContentCreateWithBody(ctx context.Context, params *PostContentCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContentCreate(ctx context.Context, params *PostContentCreateParams, body PostContentCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentDeals request
	GetContentDeals(ctx context.Context, params *GetContentDealsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentEnsureReplicationDatacid request
	GetContentEnsureReplicationDatacid(ctx context.Context, datacid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentFailuresContent request
	GetContentFailuresContent(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContentImportdeal request with any body
	PostContentImportdealWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContentImportdeal(ctx context.Context, body PostContentImportdealJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentList request
	GetContentList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentReadCont request
	GetContentReadCont(ctx context.Context, cont string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentStagingZones request
	GetContentStagingZones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentStats request
	GetContentStats(ctx context.Context, params *GetContentStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentStatusId request
	GetContentStatusId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentId request
	GetContentId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDealEstimate request with any body
	PostDealEstimateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDealEstimate(ctx context.Context, body PostDealEstimateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDealInfoDealid request
	GetDealInfoDealid(ctx context.Context, dealid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDealProposalPropcid request
	GetDealProposalPropcid(ctx context.Context, propcid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDealQueryMiner request
	GetDealQueryMiner(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDealStatusByProposalPropcid request
	GetDealStatusByProposalPropcid(ctx context.Context, propcid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDealStatusMinerPropcid request
	GetDealStatusMinerPropcid(ctx context.Context, miner string, propcid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDealTransferInProgress request
	GetDealTransferInProgress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDealTransferStatus request with any body
	PostDealTransferStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDealTransferStatus(ctx context.Context, body PostDealTransferStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDealsFailures request
	GetDealsFailures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDealsMakeMiner request with any body
	PostDealsMakeMinerWithBody(ctx context.Context, miner string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDealsMakeMiner(ctx context.Context, miner string, body PostDealsMakeMinerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDealsStatusDeal request
	GetDealsStatusDeal(ctx context.Context, deal int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetAddrs request
	GetNetAddrs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPinningPins request
	GetPinningPins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPinningPins request with any body
	PostPinningPinsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPinningPins(ctx context.Context, body PostPinningPinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePinningPinsPinid request
	DeletePinningPinsPinid(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPinningPinsPinid request
	GetPinningPinsPinid(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPinningPinsPinid request
	PostPinningPinsPinid(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicByCidCid request
	GetPublicByCidCid(ctx context.Context, cid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicDealsFailures request
	GetPublicDealsFailures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicInfo request
	GetPublicInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMetricsDealsOnChain request
	GetPublicMetricsDealsOnChain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMiners request
	GetPublicMiners(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMinersDealsMiner request
	GetPublicMinersDealsMiner(ctx context.Context, miner string, params *GetPublicMinersDealsMinerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMinersFailuresMiner request
	GetPublicMinersFailuresMiner(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMinersStatsMiner request
	GetPublicMinersStatsMiner(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMinersStorageQueryMiner request
	GetPublicMinersStorageQueryMiner(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicNetAddrs request
	GetPublicNetAddrs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicNetPeers request
	GetPublicNetPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicStats request
	GetPublicStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserApiKeys request
	GetUserApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserApiKeys request
	PostUserApiKeys(ctx context.Context, params *PostUserApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserApiKeysKey request
	DeleteUserApiKeysKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserExport request
	GetUserExport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserStats request
	GetUserStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAdminAutoretrieveInitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminAutoretrieveInitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminAutoretrieveInitWithFormdataBody(ctx context.Context, body PostAdminAutoretrieveInitFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminAutoretrieveInitRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminAutoretrieveList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminAutoretrieveListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminPeeringPeersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminPeeringPeersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminPeeringPeers(ctx context.Context, body DeleteAdminPeeringPeersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminPeeringPeersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminPeeringPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminPeeringPeersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminPeeringPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminPeeringPeersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminPeeringStart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminPeeringStartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminPeeringStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminPeeringStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminPeeringStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminPeeringStopRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminSystemConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminSystemConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAutoretrieveHeartbeat(ctx context.Context, params *PostAutoretrieveHeartbeatParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAutoretrieveHeartbeatRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollections(ctx context.Context, body PostCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsFsAdd(ctx context.Context, params *PostCollectionsFsAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsFsAddRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCollectionsColuuid(ctx context.Context, coluuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCollectionsColuuidRequest(c.Server, coluuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionsColuuid(ctx context.Context, coluuid string, params *GetCollectionsColuuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsColuuidRequest(c.Server, coluuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsColuuidWithBody(ctx context.Context, coluuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsColuuidRequestWithBody(c.Server, coluuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsColuuid(ctx context.Context, coluuid string, body PostCollectionsColuuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsColuuidRequest(c.Server, coluuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCollectionsColuuidCommit(ctx context.Context, coluuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCollectionsColuuidCommitRequest(c.Server, coluuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCollectionsColuuidContentsWithBody(ctx context.Context, coluuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCollectionsColuuidContentsRequestWithBody(c.Server, coluuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCollectionsColuuidContents(ctx context.Context, coluuid string, body DeleteCollectionsColuuidContentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCollectionsColuuidContentsRequest(c.Server, coluuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentAddWithBody(ctx context.Context, params *PostContentAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentAddRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentAddCarWithBody(ctx context.Context, params *PostContentAddCarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentAddCarRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentAddCar(ctx context.Context, params *PostContentAddCarParams, body PostContentAddCarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentAddCarRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentAddIpfsWithBody(ctx context.Context, params *PostContentAddIpfsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentAddIpfsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentAddIpfs(ctx context.Context, params *PostContentAddIpfsParams, body PostContentAddIpfsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentAddIpfsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentAggregatedContent(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentAggregatedContentRequest(c.Server, content)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentAllDeals(ctx context.Context, params *GetContentAllDealsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentAllDealsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentBwUsageContent(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentBwUsageContentRequest(c.Server, content)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentCreateWithBody(ctx context.Context, params *PostContentCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentCreate(ctx context.Context, params *PostContentCreateParams, body PostContentCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentDeals(ctx context.Context, params *GetContentDealsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentDealsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentEnsureReplicationDatacid(ctx context.Context, datacid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentEnsureReplicationDatacidRequest(c.Server, datacid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentFailuresContent(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentFailuresContentRequest(c.Server, content)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentImportdealWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentImportdealRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentImportdeal(ctx context.Context, body PostContentImportdealJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentImportdealRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentReadCont(ctx context.Context, cont string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentReadContRequest(c.Server, cont)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentStagingZones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentStagingZonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentStats(ctx context.Context, params *GetContentStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentStatusId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentStatusIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDealEstimateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDealEstimateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDealEstimate(ctx context.Context, body PostDealEstimateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDealEstimateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDealInfoDealid(ctx context.Context, dealid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDealInfoDealidRequest(c.Server, dealid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDealProposalPropcid(ctx context.Context, propcid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDealProposalPropcidRequest(c.Server, propcid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDealQueryMiner(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDealQueryMinerRequest(c.Server, miner)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDealStatusByProposalPropcid(ctx context.Context, propcid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDealStatusByProposalPropcidRequest(c.Server, propcid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDealStatusMinerPropcid(ctx context.Context, miner string, propcid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDealStatusMinerPropcidRequest(c.Server, miner, propcid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDealTransferInProgress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDealTransferInProgressRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDealTransferStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDealTransferStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDealTransferStatus(ctx context.Context, body PostDealTransferStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDealTransferStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDealsFailures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDealsFailuresRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDealsMakeMinerWithBody(ctx context.Context, miner string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDealsMakeMinerRequestWithBody(c.Server, miner, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDealsMakeMiner(ctx context.Context, miner string, body PostDealsMakeMinerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDealsMakeMinerRequest(c.Server, miner, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDealsStatusDeal(ctx context.Context, deal int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDealsStatusDealRequest(c.Server, deal)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetAddrs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetAddrsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPinningPins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPinningPinsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPinningPinsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPinningPinsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPinningPins(ctx context.Context, body PostPinningPinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPinningPinsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePinningPinsPinid(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePinningPinsPinidRequest(c.Server, pinid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPinningPinsPinid(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPinningPinsPinidRequest(c.Server, pinid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPinningPinsPinid(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPinningPinsPinidRequest(c.Server, pinid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicByCidCid(ctx context.Context, cid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicByCidCidRequest(c.Server, cid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicDealsFailures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicDealsFailuresRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMetricsDealsOnChain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMetricsDealsOnChainRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMiners(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMinersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMinersDealsMiner(ctx context.Context, miner string, params *GetPublicMinersDealsMinerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMinersDealsMinerRequest(c.Server, miner, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMinersFailuresMiner(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMinersFailuresMinerRequest(c.Server, miner)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMinersStatsMiner(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMinersStatsMinerRequest(c.Server, miner)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMinersStorageQueryMiner(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMinersStorageQueryMinerRequest(c.Server, miner)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicNetAddrs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicNetAddrsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicNetPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicNetPeersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserApiKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserApiKeys(ctx context.Context, params *PostUserApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserApiKeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserApiKeysKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserApiKeysKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserExport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserExportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAdminAutoretrieveInitRequestWithFormdataBody calls the generic PostAdminAutoretrieveInit builder with application/x-www-form-urlencoded body
func NewPostAdminAutoretrieveInitRequestWithFormdataBody(server string, body PostAdminAutoretrieveInitFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAdminAutoretrieveInitRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAdminAutoretrieveInitRequestWithBody generates requests for PostAdminAutoretrieveInit with any type of body
func NewPostAdminAutoretrieveInitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/autoretrieve/init")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminAutoretrieveListRequest generates requests for GetAdminAutoretrieveList
func NewGetAdminAutoretrieveListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/autoretrieve/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminPeeringPeersRequest calls the generic DeleteAdminPeeringPeers builder with application/json body
func NewDeleteAdminPeeringPeersRequest(server string, body DeleteAdminPeeringPeersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminPeeringPeersRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAdminPeeringPeersRequestWithBody generates requests for DeleteAdminPeeringPeers with any type of body
func NewDeleteAdminPeeringPeersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/peering/peers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminPeeringPeersRequest generates requests for GetAdminPeeringPeers
func NewGetAdminPeeringPeersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/peering/peers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminPeeringPeersRequest generates requests for PostAdminPeeringPeers
func NewPostAdminPeeringPeersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/peering/peers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminPeeringStartRequest generates requests for PostAdminPeeringStart
func NewPostAdminPeeringStartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/peering/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminPeeringStatusRequest generates requests for GetAdminPeeringStatus
func NewGetAdminPeeringStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/peering/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminPeeringStopRequest generates requests for PostAdminPeeringStop
func NewPostAdminPeeringStopRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/peering/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminSystemConfigRequest generates requests for GetAdminSystemConfig
func NewGetAdminSystemConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/system/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminUsersRequest generates requests for GetAdminUsers
func NewGetAdminUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAutoretrieveHeartbeatRequest generates requests for PostAutoretrieveHeartbeat
func NewPostAutoretrieveHeartbeatRequest(server string, params *PostAutoretrieveHeartbeatParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/autoretrieve/heartbeat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewGetCollectionsRequest generates requests for GetCollections
func NewGetCollectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCollectionsRequest calls the generic PostCollections builder with application/json body
func NewPostCollectionsRequest(server string, body PostCollectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCollectionsRequestWithBody generates requests for PostCollections with any type of body
func NewPostCollectionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsFsAddRequest generates requests for PostCollectionsFsAdd
func NewPostCollectionsFsAddRequest(server string, params *PostCollectionsFsAddParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/fs/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coluuid", runtime.ParamLocationQuery, params.Coluuid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content", runtime.ParamLocationQuery, params.Content); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCollectionsColuuidRequest generates requests for DeleteCollectionsColuuid
func NewDeleteCollectionsColuuidRequest(server string, coluuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "coluuid", runtime.ParamLocationPath, coluuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionsColuuidRequest generates requests for GetCollectionsColuuid
func NewGetCollectionsColuuidRequest(server string, coluuid string, params *GetCollectionsColuuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "coluuid", runtime.ParamLocationPath, coluuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Dir != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dir", runtime.ParamLocationQuery, *params.Dir); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCollectionsColuuidRequest calls the generic PostCollectionsColuuid builder with application/json body
func NewPostCollectionsColuuidRequest(server string, coluuid string, body PostCollectionsColuuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCollectionsColuuidRequestWithBody(server, coluuid, "application/json", bodyReader)
}

// NewPostCollectionsColuuidRequestWithBody generates requests for PostCollectionsColuuid with any type of body
func NewPostCollectionsColuuidRequestWithBody(server string, coluuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "coluuid", runtime.ParamLocationPath, coluuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCollectionsColuuidCommitRequest generates requests for PostCollectionsColuuidCommit
func NewPostCollectionsColuuidCommitRequest(server string, coluuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "coluuid", runtime.ParamLocationPath, coluuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s/commit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCollectionsColuuidContentsRequest calls the generic DeleteCollectionsColuuidContents builder with application/json body
func NewDeleteCollectionsColuuidContentsRequest(server string, coluuid string, body DeleteCollectionsColuuidContentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCollectionsColuuidContentsRequestWithBody(server, coluuid, "application/json", bodyReader)
}

// NewDeleteCollectionsColuuidContentsRequestWithBody generates requests for DeleteCollectionsColuuidContents with any type of body
func NewDeleteCollectionsColuuidContentsRequestWithBody(server string, coluuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "coluuid", runtime.ParamLocationPath, coluuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/%s/contents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostContentAddRequestWithBody generates requests for PostContentAdd with any type of body
func NewPostContentAddRequestWithBody(server string, params *PostContentAddParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Coluuid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "coluuid", runtime.ParamLocationQuery, *params.Coluuid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Replication != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "replication", runtime.ParamLocationQuery, *params.Replication); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IgnoreDupes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignore-dupes", runtime.ParamLocationQuery, *params.IgnoreDupes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LazyProvide != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lazy-provide", runtime.ParamLocationQuery, *params.LazyProvide); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Dir != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dir", runtime.ParamLocationQuery, *params.Dir); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostContentAddCarRequest calls the generic PostContentAddCar builder with application/json body
func NewPostContentAddCarRequest(server string, params *PostContentAddCarParams, body PostContentAddCarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContentAddCarRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostContentAddCarRequestWithBody generates requests for PostContentAddCar with any type of body
func NewPostContentAddCarRequestWithBody(server string, params *PostContentAddCarParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/add-car")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IgnoreDupes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignore-dupes", runtime.ParamLocationQuery, *params.IgnoreDupes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filename != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostContentAddIpfsRequest calls the generic PostContentAddIpfs builder with application/json body
func NewPostContentAddIpfsRequest(server string, params *PostContentAddIpfsParams, body PostContentAddIpfsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContentAddIpfsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostContentAddIpfsRequestWithBody generates requests for PostContentAddIpfs with any type of body
func NewPostContentAddIpfsRequestWithBody(server string, params *PostContentAddIpfsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/add-ipfs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IgnoreDupes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignore-dupes", runtime.ParamLocationQuery, *params.IgnoreDupes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContentAggregatedContentRequest generates requests for GetContentAggregatedContent
func NewGetContentAggregatedContentRequest(server string, content string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content", runtime.ParamLocationPath, content)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/aggregated/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentAllDealsRequest generates requests for GetContentAllDeals
func NewGetContentAllDealsRequest(server string, params *GetContentAllDealsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/all-deals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "begin", runtime.ParamLocationQuery, params.Begin); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration", runtime.ParamLocationQuery, params.Duration); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, params.All); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentBwUsageContentRequest generates requests for GetContentBwUsageContent
func NewGetContentBwUsageContentRequest(server string, content string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content", runtime.ParamLocationPath, content)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/bw-usage/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContentCreateRequest calls the generic PostContentCreate builder with application/json body
func NewPostContentCreateRequest(server string, params *PostContentCreateParams, body PostContentCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContentCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostContentCreateRequestWithBody generates requests for PostContentCreate with any type of body
func NewPostContentCreateRequestWithBody(server string, params *PostContentCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IgnoreDupes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignore-dupes", runtime.ParamLocationQuery, *params.IgnoreDupes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContentDealsRequest generates requests for GetContentDeals
func NewGetContentDealsRequest(server string, params *GetContentDealsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/deals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentEnsureReplicationDatacidRequest generates requests for GetContentEnsureReplicationDatacid
func NewGetContentEnsureReplicationDatacidRequest(server string, datacid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "datacid", runtime.ParamLocationPath, datacid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/ensure-replication/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentFailuresContentRequest generates requests for GetContentFailuresContent
func NewGetContentFailuresContentRequest(server string, content string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "content", runtime.ParamLocationPath, content)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/failures/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContentImportdealRequest calls the generic PostContentImportdeal builder with application/json body
func NewPostContentImportdealRequest(server string, body PostContentImportdealJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContentImportdealRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContentImportdealRequestWithBody generates requests for PostContentImportdeal with any type of body
func NewPostContentImportdealRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/importdeal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContentListRequest generates requests for GetContentList
func NewGetContentListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentReadContRequest generates requests for GetContentReadCont
func NewGetContentReadContRequest(server string, cont string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cont", runtime.ParamLocationPath, cont)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/read/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentStagingZonesRequest generates requests for GetContentStagingZones
func NewGetContentStagingZonesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/staging-zones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentStatsRequest generates requests for GetContentStats
func NewGetContentStatsRequest(server string, params *GetContentStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentStatusIdRequest generates requests for GetContentStatusId
func NewGetContentStatusIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentIdRequest generates requests for GetContentId
func NewGetContentIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDealEstimateRequest calls the generic PostDealEstimate builder with application/json body
func NewPostDealEstimateRequest(server string, body PostDealEstimateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDealEstimateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDealEstimateRequestWithBody generates requests for PostDealEstimate with any type of body
func NewPostDealEstimateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deal/estimate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDealInfoDealidRequest generates requests for GetDealInfoDealid
func NewGetDealInfoDealidRequest(server string, dealid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dealid", runtime.ParamLocationPath, dealid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deal/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDealProposalPropcidRequest generates requests for GetDealProposalPropcid
func NewGetDealProposalPropcidRequest(server string, propcid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "propcid", runtime.ParamLocationPath, propcid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deal/proposal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDealQueryMinerRequest generates requests for GetDealQueryMiner
func NewGetDealQueryMinerRequest(server string, miner string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "miner", runtime.ParamLocationPath, miner)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deal/query/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDealStatusByProposalPropcidRequest generates requests for GetDealStatusByProposalPropcid
func NewGetDealStatusByProposalPropcidRequest(server string, propcid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "propcid", runtime.ParamLocationPath, propcid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deal/status-by-proposal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDealStatusMinerPropcidRequest generates requests for GetDealStatusMinerPropcid
func NewGetDealStatusMinerPropcidRequest(server string, miner string, propcid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "miner", runtime.ParamLocationPath, miner)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "propcid", runtime.ParamLocationPath, propcid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deal/status/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDealTransferInProgressRequest generates requests for GetDealTransferInProgress
func NewGetDealTransferInProgressRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deal/transfer/in-progress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDealTransferStatusRequest calls the generic PostDealTransferStatus builder with application/json body
func NewPostDealTransferStatusRequest(server string, body PostDealTransferStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDealTransferStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDealTransferStatusRequestWithBody generates requests for PostDealTransferStatus with any type of body
func NewPostDealTransferStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deal/transfer/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDealsFailuresRequest generates requests for GetDealsFailures
func NewGetDealsFailuresRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deals/failures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDealsMakeMinerRequest calls the generic PostDealsMakeMiner builder with application/json body
func NewPostDealsMakeMinerRequest(server string, miner string, body PostDealsMakeMinerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDealsMakeMinerRequestWithBody(server, miner, "application/json", bodyReader)
}

// NewPostDealsMakeMinerRequestWithBody generates requests for PostDealsMakeMiner with any type of body
func NewPostDealsMakeMinerRequestWithBody(server string, miner string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "miner", runtime.ParamLocationPath, miner)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deals/make/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDealsStatusDealRequest generates requests for GetDealsStatusDeal
func NewGetDealsStatusDealRequest(server string, deal int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deal", runtime.ParamLocationPath, deal)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deals/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNetAddrsRequest generates requests for GetNetAddrs
func NewGetNetAddrsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/net/addrs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPinningPinsRequest generates requests for GetPinningPins
func NewGetPinningPinsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pinning/pins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPinningPinsRequest calls the generic PostPinningPins builder with application/json body
func NewPostPinningPinsRequest(server string, body PostPinningPinsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPinningPinsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPinningPinsRequestWithBody generates requests for PostPinningPins with any type of body
func NewPostPinningPinsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pinning/pins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePinningPinsPinidRequest generates requests for DeletePinningPinsPinid
func NewDeletePinningPinsPinidRequest(server string, pinid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pinid", runtime.ParamLocationPath, pinid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pinning/pins/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPinningPinsPinidRequest generates requests for GetPinningPinsPinid
func NewGetPinningPinsPinidRequest(server string, pinid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pinid", runtime.ParamLocationPath, pinid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pinning/pins/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPinningPinsPinidRequest generates requests for PostPinningPinsPinid
func NewPostPinningPinsPinidRequest(server string, pinid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pinid", runtime.ParamLocationPath, pinid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pinning/pins/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicByCidCidRequest generates requests for GetPublicByCidCid
func NewGetPublicByCidCidRequest(server string, cid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cid", runtime.ParamLocationPath, cid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/by-cid/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicDealsFailuresRequest generates requests for GetPublicDealsFailures
func NewGetPublicDealsFailuresRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/deals/failures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicInfoRequest generates requests for GetPublicInfo
func NewGetPublicInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicMetricsDealsOnChainRequest generates requests for GetPublicMetricsDealsOnChain
func NewGetPublicMetricsDealsOnChainRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/metrics/deals-on-chain")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicMinersRequest generates requests for GetPublicMiners
func NewGetPublicMinersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/miners")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicMinersDealsMinerRequest generates requests for GetPublicMinersDealsMiner
func NewGetPublicMinersDealsMinerRequest(server string, miner string, params *GetPublicMinersDealsMinerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "miner", runtime.ParamLocationPath, miner)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/miners/deals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IgnoreFailed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignore-failed", runtime.ParamLocationQuery, *params.IgnoreFailed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicMinersFailuresMinerRequest generates requests for GetPublicMinersFailuresMiner
func NewGetPublicMinersFailuresMinerRequest(server string, miner string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "miner", runtime.ParamLocationPath, miner)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/miners/failures/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicMinersStatsMinerRequest generates requests for GetPublicMinersStatsMiner
func NewGetPublicMinersStatsMinerRequest(server string, miner string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "miner", runtime.ParamLocationPath, miner)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/miners/stats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicMinersStorageQueryMinerRequest generates requests for GetPublicMinersStorageQueryMiner
func NewGetPublicMinersStorageQueryMinerRequest(server string, miner string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "miner", runtime.ParamLocationPath, miner)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/miners/storage/query/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicNetAddrsRequest generates requests for GetPublicNetAddrs
func NewGetPublicNetAddrsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/net/addrs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicNetPeersRequest generates requests for GetPublicNetPeers
func NewGetPublicNetPeersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/net/peers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicStatsRequest generates requests for GetPublicStats
func NewGetPublicStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserApiKeysRequest generates requests for GetUserApiKeys
func NewGetUserApiKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/api-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserApiKeysRequest generates requests for PostUserApiKeys
func NewPostUserApiKeysRequest(server string, params *PostUserApiKeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/api-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Expiry != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiry", runtime.ParamLocationQuery, *params.Expiry); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Perms != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perms", runtime.ParamLocationQuery, *params.Perms); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserApiKeysKeyRequest generates requests for DeleteUserApiKeysKey
func NewDeleteUserApiKeysKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/api-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserExportRequest generates requests for GetUserExport
func NewGetUserExportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserStatsRequest generates requests for GetUserStats
func NewGetUserStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAdminAutoretrieveInit request with any body
	PostAdminAutoretrieveInitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminAutoretrieveInitResponse, error)

	PostAdminAutoretrieveInitWithFormdataBodyWithResponse(ctx context.Context, body PostAdminAutoretrieveInitFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAdminAutoretrieveInitResponse, error)

	// GetAdminAutoretrieveList request
	GetAdminAutoretrieveListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminAutoretrieveListResponse, error)

	// DeleteAdminPeeringPeers request with any body
	DeleteAdminPeeringPeersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminPeeringPeersResponse, error)

	DeleteAdminPeeringPeersWithResponse(ctx context.Context, body DeleteAdminPeeringPeersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminPeeringPeersResponse, error)

	// GetAdminPeeringPeers request
	GetAdminPeeringPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminPeeringPeersResponse, error)

	// PostAdminPeeringPeers request
	PostAdminPeeringPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAdminPeeringPeersResponse, error)

	// PostAdminPeeringStart request
	PostAdminPeeringStartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAdminPeeringStartResponse, error)

	// GetAdminPeeringStatus request
	GetAdminPeeringStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminPeeringStatusResponse, error)

	// PostAdminPeeringStop request
	PostAdminPeeringStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAdminPeeringStopResponse, error)

	// GetAdminSystemConfig request
	GetAdminSystemConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminSystemConfigResponse, error)

	// GetAdminUsers request
	GetAdminUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminUsersResponse, error)

	// PostAutoretrieveHeartbeat request
	PostAutoretrieveHeartbeatWithResponse(ctx context.Context, params *PostAutoretrieveHeartbeatParams, reqEditors ...RequestEditorFn) (*PostAutoretrieveHeartbeatResponse, error)

	// GetCollections request
	GetCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error)

	// PostCollections request with any body
	PostCollectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsResponse, error)

	PostCollectionsWithResponse(ctx context.Context, body PostCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsResponse, error)

	// PostCollectionsFsAdd request
	PostCollectionsFsAddWithResponse(ctx context.Context, params *PostCollectionsFsAddParams, reqEditors ...RequestEditorFn) (*PostCollectionsFsAddResponse, error)

	// DeleteCollectionsColuuid request
	DeleteCollectionsColuuidWithResponse(ctx context.Context, coluuid string, reqEditors ...RequestEditorFn) (*DeleteCollectionsColuuidResponse, error)

	// GetCollectionsColuuid request
	GetCollectionsColuuidWithResponse(ctx context.Context, coluuid string, params *GetCollectionsColuuidParams, reqEditors ...RequestEditorFn) (*GetCollectionsColuuidResponse, error)

	// PostCollectionsColuuid request with any body
	PostCollectionsColuuidWithBodyWithResponse(ctx context.Context, coluuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsColuuidResponse, error)

	PostCollectionsColuuidWithResponse(ctx context.Context, coluuid string, body PostCollectionsColuuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsColuuidResponse, error)

	// PostCollectionsColuuidCommit request
	PostCollectionsColuuidCommitWithResponse(ctx context.Context, coluuid string, reqEditors ...RequestEditorFn) (*PostCollectionsColuuidCommitResponse, error)

	// DeleteCollectionsColuuidContents request with any body
	DeleteCollectionsColuuidContentsWithBodyWithResponse(ctx context.Context, coluuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCollectionsColuuidContentsResponse, error)

	DeleteCollectionsColuuidContentsWithResponse(ctx context.Context, coluuid string, body DeleteCollectionsColuuidContentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCollectionsColuuidContentsResponse, error)

	// PostContentAdd request with any body
	PostContentAddWithBodyWithResponse(ctx context.Context, params *PostContentAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentAddResponse, error)

	// PostContentAddCar request with any body
	PostContentAddCarWithBodyWithResponse(ctx context.Context, params *PostContentAddCarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentAddCarResponse, error)

	PostContentAddCarWithResponse(ctx context.Context, params *PostContentAddCarParams, body PostContentAddCarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentAddCarResponse, error)

	// PostContentAddIpfs request with any body
	PostContentAddIpfsWithBodyWithResponse(ctx context.Context, params *PostContentAddIpfsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentAddIpfsResponse, error)

	PostContentAddIpfsWithResponse(ctx context.Context, params *PostContentAddIpfsParams, body PostContentAddIpfsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentAddIpfsResponse, error)

	// GetContentAggregatedContent request
	GetContentAggregatedContentWithResponse(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*GetContentAggregatedContentResponse, error)

	// GetContentAllDeals request
	GetContentAllDealsWithResponse(ctx context.Context, params *GetContentAllDealsParams, reqEditors ...RequestEditorFn) (*GetContentAllDealsResponse, error)

	// GetContentBwUsageContent request
	GetContentBwUsageContentWithResponse(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*GetContentBwUsageContentResponse, error)

	// PostContentCreate request with any body
	PostContentCreateWithBodyWithResponse(ctx context.Context, params *PostContentCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentCreateResponse, error)

	PostContentCreateWithResponse(ctx context.Context, params *PostContentCreateParams, body PostContentCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentCreateResponse, error)

	// GetContentDeals request
	GetContentDealsWithResponse(ctx context.Context, params *GetContentDealsParams, reqEditors ...RequestEditorFn) (*GetContentDealsResponse, error)

	// GetContentEnsureReplicationDatacid request
	GetContentEnsureReplicationDatacidWithResponse(ctx context.Context, datacid string, reqEditors ...RequestEditorFn) (*GetContentEnsureReplicationDatacidResponse, error)

	// GetContentFailuresContent request
	GetContentFailuresContentWithResponse(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*GetContentFailuresContentResponse, error)

	// PostContentImportdeal request with any body
	PostContentImportdealWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentImportdealResponse, error)

	PostContentImportdealWithResponse(ctx context.Context, body PostContentImportdealJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentImportdealResponse, error)

	// GetContentList request
	GetContentListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContentListResponse, error)

	// GetContentReadCont request
	GetContentReadContWithResponse(ctx context.Context, cont string, reqEditors ...RequestEditorFn) (*GetContentReadContResponse, error)

	// GetContentStagingZones request
	GetContentStagingZonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContentStagingZonesResponse, error)

	// GetContentStats request
	GetContentStatsWithResponse(ctx context.Context, params *GetContentStatsParams, reqEditors ...RequestEditorFn) (*GetContentStatsResponse, error)

	// GetContentStatusId request
	GetContentStatusIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetContentStatusIdResponse, error)

	// GetContentId request
	GetContentIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetContentIdResponse, error)

	// PostDealEstimate request with any body
	PostDealEstimateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDealEstimateResponse, error)

	PostDealEstimateWithResponse(ctx context.Context, body PostDealEstimateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDealEstimateResponse, error)

	// GetDealInfoDealid request
	GetDealInfoDealidWithResponse(ctx context.Context, dealid int, reqEditors ...RequestEditorFn) (*GetDealInfoDealidResponse, error)

	// GetDealProposalPropcid request
	GetDealProposalPropcidWithResponse(ctx context.Context, propcid string, reqEditors ...RequestEditorFn) (*GetDealProposalPropcidResponse, error)

	// GetDealQueryMiner request
	GetDealQueryMinerWithResponse(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*GetDealQueryMinerResponse, error)

	// GetDealStatusByProposalPropcid request
	GetDealStatusByProposalPropcidWithResponse(ctx context.Context, propcid string, reqEditors ...RequestEditorFn) (*GetDealStatusByProposalPropcidResponse, error)

	// GetDealStatusMinerPropcid request
	GetDealStatusMinerPropcidWithResponse(ctx context.Context, miner string, propcid string, reqEditors ...RequestEditorFn) (*GetDealStatusMinerPropcidResponse, error)

	// GetDealTransferInProgress request
	GetDealTransferInProgressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDealTransferInProgressResponse, error)

	// PostDealTransferStatus request with any body
	PostDealTransferStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDealTransferStatusResponse, error)

	PostDealTransferStatusWithResponse(ctx context.Context, body PostDealTransferStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDealTransferStatusResponse, error)

	// GetDealsFailures request
	GetDealsFailuresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDealsFailuresResponse, error)

	// PostDealsMakeMiner request with any body
	PostDealsMakeMinerWithBodyWithResponse(ctx context.Context, miner string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDealsMakeMinerResponse, error)

	PostDealsMakeMinerWithResponse(ctx context.Context, miner string, body PostDealsMakeMinerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDealsMakeMinerResponse, error)

	// GetDealsStatusDeal request
	GetDealsStatusDealWithResponse(ctx context.Context, deal int, reqEditors ...RequestEditorFn) (*GetDealsStatusDealResponse, error)

	// GetNetAddrs request
	GetNetAddrsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNetAddrsResponse, error)

	// GetPinningPins request
	GetPinningPinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPinningPinsResponse, error)

	// PostPinningPins request with any body
	PostPinningPinsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPinningPinsResponse, error)

	PostPinningPinsWithResponse(ctx context.Context, body PostPinningPinsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPinningPinsResponse, error)

	// DeletePinningPinsPinid request
	DeletePinningPinsPinidWithResponse(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*DeletePinningPinsPinidResponse, error)

	// GetPinningPinsPinid request
	GetPinningPinsPinidWithResponse(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*GetPinningPinsPinidResponse, error)

	// PostPinningPinsPinid request
	PostPinningPinsPinidWithResponse(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*PostPinningPinsPinidResponse, error)

	// GetPublicByCidCid request
	GetPublicByCidCidWithResponse(ctx context.Context, cid string, reqEditors ...RequestEditorFn) (*GetPublicByCidCidResponse, error)

	// GetPublicDealsFailures request
	GetPublicDealsFailuresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicDealsFailuresResponse, error)

	// GetPublicInfo request
	GetPublicInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicInfoResponse, error)

	// GetPublicMetricsDealsOnChain request
	GetPublicMetricsDealsOnChainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicMetricsDealsOnChainResponse, error)

	// GetPublicMiners request
	GetPublicMinersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicMinersResponse, error)

	// GetPublicMinersDealsMiner request
	GetPublicMinersDealsMinerWithResponse(ctx context.Context, miner string, params *GetPublicMinersDealsMinerParams, reqEditors ...RequestEditorFn) (*GetPublicMinersDealsMinerResponse, error)

	// GetPublicMinersFailuresMiner request
	GetPublicMinersFailuresMinerWithResponse(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*GetPublicMinersFailuresMinerResponse, error)

	// GetPublicMinersStatsMiner request
	GetPublicMinersStatsMinerWithResponse(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*GetPublicMinersStatsMinerResponse, error)

	// GetPublicMinersStorageQueryMiner request
	GetPublicMinersStorageQueryMinerWithResponse(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*GetPublicMinersStorageQueryMinerResponse, error)

	// GetPublicNetAddrs request
	GetPublicNetAddrsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicNetAddrsResponse, error)

	// GetPublicNetPeers request
	GetPublicNetPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicNetPeersResponse, error)

	// GetPublicStats request
	GetPublicStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicStatsResponse, error)

	// GetUserApiKeys request
	GetUserApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserApiKeysResponse, error)

	// PostUserApiKeys request
	PostUserApiKeysWithResponse(ctx context.Context, params *PostUserApiKeysParams, reqEditors ...RequestEditorFn) (*PostUserApiKeysResponse, error)

	// DeleteUserApiKeysKey request
	DeleteUserApiKeysKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteUserApiKeysKeyResponse, error)

	// GetUserExport request
	GetUserExportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserExportResponse, error)

	// GetUserStats request
	GetUserStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserStatsResponse, error)
}

type PostAdminAutoretrieveInitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostAdminAutoretrieveInitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminAutoretrieveInitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminAutoretrieveListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetAdminAutoretrieveListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminAutoretrieveListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminPeeringPeersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r DeleteAdminPeeringPeersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminPeeringPeersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminPeeringPeersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetAdminPeeringPeersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminPeeringPeersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminPeeringPeersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostAdminPeeringPeersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminPeeringPeersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminPeeringStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostAdminPeeringStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminPeeringStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminPeeringStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetAdminPeeringStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminPeeringStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminPeeringStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostAdminPeeringStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminPeeringStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminSystemConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetAdminSystemConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminSystemConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetAdminUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAutoretrieveHeartbeatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostAutoretrieveHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAutoretrieveHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CollectionsCollection
	JSON400      *UtilHttpError
	JSON404      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionsCollection
	JSON400      *UtilHttpError
	JSON404      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsFsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostCollectionsFsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsFsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCollectionsColuuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCollectionsColuuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCollectionsColuuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionsColuuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetCollectionsColuuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionsColuuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsColuuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostCollectionsColuuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsColuuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCollectionsColuuidCommitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostCollectionsColuuidCommitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCollectionsColuuidCommitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCollectionsColuuidContentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r DeleteCollectionsColuuidContentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCollectionsColuuidContentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContentAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UtilContentAddResponse
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostContentAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContentAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContentAddCarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostContentAddCarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContentAddCarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContentAddIpfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostContentAddIpfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContentAddIpfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentAggregatedContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentAggregatedContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentAggregatedContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentAllDealsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentAllDealsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentAllDealsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentBwUsageContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentBwUsageContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentBwUsageContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContentCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostContentCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContentCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentDealsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentDealsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentDealsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentEnsureReplicationDatacidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentEnsureReplicationDatacidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentEnsureReplicationDatacidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentFailuresContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentFailuresContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentFailuresContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContentImportdealResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostContentImportdealResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContentImportdealResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentReadContResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentReadContResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentReadContResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentStagingZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentStagingZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentStagingZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentStatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentStatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentStatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetContentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDealEstimateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostDealEstimateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDealEstimateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDealInfoDealidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetDealInfoDealidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDealInfoDealidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDealProposalPropcidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetDealProposalPropcidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDealProposalPropcidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDealQueryMinerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetDealQueryMinerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDealQueryMinerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDealStatusByProposalPropcidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetDealStatusByProposalPropcidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDealStatusByProposalPropcidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDealStatusMinerPropcidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetDealStatusMinerPropcidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDealStatusMinerPropcidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDealTransferInProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetDealTransferInProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDealTransferInProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDealTransferStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostDealTransferStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDealTransferStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDealsFailuresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetDealsFailuresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDealsFailuresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDealsMakeMinerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostDealsMakeMinerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDealsMakeMinerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDealsStatusDealResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetDealsStatusDealResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDealsStatusDealResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetAddrsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetNetAddrsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetAddrsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPinningPinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON404      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPinningPinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPinningPinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPinningPinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostPinningPinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPinningPinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePinningPinsPinidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r DeletePinningPinsPinidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePinningPinsPinidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPinningPinsPinidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPinningPinsPinidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPinningPinsPinidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPinningPinsPinidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostPinningPinsPinidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPinningPinsPinidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicByCidCidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicByCidCidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicByCidCidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicDealsFailuresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicDealsFailuresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicDealsFailuresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMetricsDealsOnChainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicMetricsDealsOnChainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMetricsDealsOnChainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMinersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicMinersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMinersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMinersDealsMinerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicMinersDealsMinerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMinersDealsMinerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMinersFailuresMinerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicMinersFailuresMinerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMinersFailuresMinerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMinersStatsMinerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicMinersStatsMinerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMinersStatsMinerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMinersStorageQueryMinerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicMinersStorageQueryMinerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMinersStorageQueryMinerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicNetAddrsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetPublicNetAddrsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicNetAddrsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicNetPeersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicNetPeersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicNetPeersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetPublicStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[][]MainGetApiKeysResp
	JSON400      *UtilHttpError
	JSON404      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetUserApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MainGetApiKeysResp
	JSON400      *UtilHttpError
	JSON404      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r PostUserApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserApiKeysKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r DeleteUserApiKeysKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserApiKeysKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetUserExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *UtilHttpError
	JSON500      *UtilHttpError
}

// Status returns HTTPResponse.Status
func (r GetUserStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAdminAutoretrieveInitWithBodyWithResponse request with arbitrary body returning *PostAdminAutoretrieveInitResponse
func (c *ClientWithResponses) PostAdminAutoretrieveInitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminAutoretrieveInitResponse, error) {
	rsp, err := c.PostAdminAutoretrieveInitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminAutoretrieveInitResponse(rsp)
}

func (c *ClientWithResponses) PostAdminAutoretrieveInitWithFormdataBodyWithResponse(ctx context.Context, body PostAdminAutoretrieveInitFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAdminAutoretrieveInitResponse, error) {
	rsp, err := c.PostAdminAutoretrieveInitWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminAutoretrieveInitResponse(rsp)
}

// GetAdminAutoretrieveListWithResponse request returning *GetAdminAutoretrieveListResponse
func (c *ClientWithResponses) GetAdminAutoretrieveListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminAutoretrieveListResponse, error) {
	rsp, err := c.GetAdminAutoretrieveList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminAutoretrieveListResponse(rsp)
}

// DeleteAdminPeeringPeersWithBodyWithResponse request with arbitrary body returning *DeleteAdminPeeringPeersResponse
func (c *ClientWithResponses) DeleteAdminPeeringPeersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminPeeringPeersResponse, error) {
	rsp, err := c.DeleteAdminPeeringPeersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminPeeringPeersResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminPeeringPeersWithResponse(ctx context.Context, body DeleteAdminPeeringPeersJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminPeeringPeersResponse, error) {
	rsp, err := c.DeleteAdminPeeringPeers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminPeeringPeersResponse(rsp)
}

// GetAdminPeeringPeersWithResponse request returning *GetAdminPeeringPeersResponse
func (c *ClientWithResponses) GetAdminPeeringPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminPeeringPeersResponse, error) {
	rsp, err := c.GetAdminPeeringPeers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminPeeringPeersResponse(rsp)
}

// PostAdminPeeringPeersWithResponse request returning *PostAdminPeeringPeersResponse
func (c *ClientWithResponses) PostAdminPeeringPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAdminPeeringPeersResponse, error) {
	rsp, err := c.PostAdminPeeringPeers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminPeeringPeersResponse(rsp)
}

// PostAdminPeeringStartWithResponse request returning *PostAdminPeeringStartResponse
func (c *ClientWithResponses) PostAdminPeeringStartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAdminPeeringStartResponse, error) {
	rsp, err := c.PostAdminPeeringStart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminPeeringStartResponse(rsp)
}

// GetAdminPeeringStatusWithResponse request returning *GetAdminPeeringStatusResponse
func (c *ClientWithResponses) GetAdminPeeringStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminPeeringStatusResponse, error) {
	rsp, err := c.GetAdminPeeringStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminPeeringStatusResponse(rsp)
}

// PostAdminPeeringStopWithResponse request returning *PostAdminPeeringStopResponse
func (c *ClientWithResponses) PostAdminPeeringStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAdminPeeringStopResponse, error) {
	rsp, err := c.PostAdminPeeringStop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminPeeringStopResponse(rsp)
}

// GetAdminSystemConfigWithResponse request returning *GetAdminSystemConfigResponse
func (c *ClientWithResponses) GetAdminSystemConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminSystemConfigResponse, error) {
	rsp, err := c.GetAdminSystemConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminSystemConfigResponse(rsp)
}

// GetAdminUsersWithResponse request returning *GetAdminUsersResponse
func (c *ClientWithResponses) GetAdminUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminUsersResponse, error) {
	rsp, err := c.GetAdminUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminUsersResponse(rsp)
}

// PostAutoretrieveHeartbeatWithResponse request returning *PostAutoretrieveHeartbeatResponse
func (c *ClientWithResponses) PostAutoretrieveHeartbeatWithResponse(ctx context.Context, params *PostAutoretrieveHeartbeatParams, reqEditors ...RequestEditorFn) (*PostAutoretrieveHeartbeatResponse, error) {
	rsp, err := c.PostAutoretrieveHeartbeat(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAutoretrieveHeartbeatResponse(rsp)
}

// GetCollectionsWithResponse request returning *GetCollectionsResponse
func (c *ClientWithResponses) GetCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error) {
	rsp, err := c.GetCollections(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsResponse(rsp)
}

// PostCollectionsWithBodyWithResponse request with arbitrary body returning *PostCollectionsResponse
func (c *ClientWithResponses) PostCollectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsResponse, error) {
	rsp, err := c.PostCollectionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsWithResponse(ctx context.Context, body PostCollectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsResponse, error) {
	rsp, err := c.PostCollections(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsResponse(rsp)
}

// PostCollectionsFsAddWithResponse request returning *PostCollectionsFsAddResponse
func (c *ClientWithResponses) PostCollectionsFsAddWithResponse(ctx context.Context, params *PostCollectionsFsAddParams, reqEditors ...RequestEditorFn) (*PostCollectionsFsAddResponse, error) {
	rsp, err := c.PostCollectionsFsAdd(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsFsAddResponse(rsp)
}

// DeleteCollectionsColuuidWithResponse request returning *DeleteCollectionsColuuidResponse
func (c *ClientWithResponses) DeleteCollectionsColuuidWithResponse(ctx context.Context, coluuid string, reqEditors ...RequestEditorFn) (*DeleteCollectionsColuuidResponse, error) {
	rsp, err := c.DeleteCollectionsColuuid(ctx, coluuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCollectionsColuuidResponse(rsp)
}

// GetCollectionsColuuidWithResponse request returning *GetCollectionsColuuidResponse
func (c *ClientWithResponses) GetCollectionsColuuidWithResponse(ctx context.Context, coluuid string, params *GetCollectionsColuuidParams, reqEditors ...RequestEditorFn) (*GetCollectionsColuuidResponse, error) {
	rsp, err := c.GetCollectionsColuuid(ctx, coluuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsColuuidResponse(rsp)
}

// PostCollectionsColuuidWithBodyWithResponse request with arbitrary body returning *PostCollectionsColuuidResponse
func (c *ClientWithResponses) PostCollectionsColuuidWithBodyWithResponse(ctx context.Context, coluuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCollectionsColuuidResponse, error) {
	rsp, err := c.PostCollectionsColuuidWithBody(ctx, coluuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsColuuidResponse(rsp)
}

func (c *ClientWithResponses) PostCollectionsColuuidWithResponse(ctx context.Context, coluuid string, body PostCollectionsColuuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCollectionsColuuidResponse, error) {
	rsp, err := c.PostCollectionsColuuid(ctx, coluuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsColuuidResponse(rsp)
}

// PostCollectionsColuuidCommitWithResponse request returning *PostCollectionsColuuidCommitResponse
func (c *ClientWithResponses) PostCollectionsColuuidCommitWithResponse(ctx context.Context, coluuid string, reqEditors ...RequestEditorFn) (*PostCollectionsColuuidCommitResponse, error) {
	rsp, err := c.PostCollectionsColuuidCommit(ctx, coluuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCollectionsColuuidCommitResponse(rsp)
}

// DeleteCollectionsColuuidContentsWithBodyWithResponse request with arbitrary body returning *DeleteCollectionsColuuidContentsResponse
func (c *ClientWithResponses) DeleteCollectionsColuuidContentsWithBodyWithResponse(ctx context.Context, coluuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCollectionsColuuidContentsResponse, error) {
	rsp, err := c.DeleteCollectionsColuuidContentsWithBody(ctx, coluuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCollectionsColuuidContentsResponse(rsp)
}

func (c *ClientWithResponses) DeleteCollectionsColuuidContentsWithResponse(ctx context.Context, coluuid string, body DeleteCollectionsColuuidContentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCollectionsColuuidContentsResponse, error) {
	rsp, err := c.DeleteCollectionsColuuidContents(ctx, coluuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCollectionsColuuidContentsResponse(rsp)
}

// PostContentAddWithBodyWithResponse request with arbitrary body returning *PostContentAddResponse
func (c *ClientWithResponses) PostContentAddWithBodyWithResponse(ctx context.Context, params *PostContentAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentAddResponse, error) {
	rsp, err := c.PostContentAddWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentAddResponse(rsp)
}

// PostContentAddCarWithBodyWithResponse request with arbitrary body returning *PostContentAddCarResponse
func (c *ClientWithResponses) PostContentAddCarWithBodyWithResponse(ctx context.Context, params *PostContentAddCarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentAddCarResponse, error) {
	rsp, err := c.PostContentAddCarWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentAddCarResponse(rsp)
}

func (c *ClientWithResponses) PostContentAddCarWithResponse(ctx context.Context, params *PostContentAddCarParams, body PostContentAddCarJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentAddCarResponse, error) {
	rsp, err := c.PostContentAddCar(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentAddCarResponse(rsp)
}

// PostContentAddIpfsWithBodyWithResponse request with arbitrary body returning *PostContentAddIpfsResponse
func (c *ClientWithResponses) PostContentAddIpfsWithBodyWithResponse(ctx context.Context, params *PostContentAddIpfsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentAddIpfsResponse, error) {
	rsp, err := c.PostContentAddIpfsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentAddIpfsResponse(rsp)
}

func (c *ClientWithResponses) PostContentAddIpfsWithResponse(ctx context.Context, params *PostContentAddIpfsParams, body PostContentAddIpfsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentAddIpfsResponse, error) {
	rsp, err := c.PostContentAddIpfs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentAddIpfsResponse(rsp)
}

// GetContentAggregatedContentWithResponse request returning *GetContentAggregatedContentResponse
func (c *ClientWithResponses) GetContentAggregatedContentWithResponse(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*GetContentAggregatedContentResponse, error) {
	rsp, err := c.GetContentAggregatedContent(ctx, content, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentAggregatedContentResponse(rsp)
}

// GetContentAllDealsWithResponse request returning *GetContentAllDealsResponse
func (c *ClientWithResponses) GetContentAllDealsWithResponse(ctx context.Context, params *GetContentAllDealsParams, reqEditors ...RequestEditorFn) (*GetContentAllDealsResponse, error) {
	rsp, err := c.GetContentAllDeals(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentAllDealsResponse(rsp)
}

// GetContentBwUsageContentWithResponse request returning *GetContentBwUsageContentResponse
func (c *ClientWithResponses) GetContentBwUsageContentWithResponse(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*GetContentBwUsageContentResponse, error) {
	rsp, err := c.GetContentBwUsageContent(ctx, content, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentBwUsageContentResponse(rsp)
}

// PostContentCreateWithBodyWithResponse request with arbitrary body returning *PostContentCreateResponse
func (c *ClientWithResponses) PostContentCreateWithBodyWithResponse(ctx context.Context, params *PostContentCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentCreateResponse, error) {
	rsp, err := c.PostContentCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentCreateResponse(rsp)
}

func (c *ClientWithResponses) PostContentCreateWithResponse(ctx context.Context, params *PostContentCreateParams, body PostContentCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentCreateResponse, error) {
	rsp, err := c.PostContentCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentCreateResponse(rsp)
}

// GetContentDealsWithResponse request returning *GetContentDealsResponse
func (c *ClientWithResponses) GetContentDealsWithResponse(ctx context.Context, params *GetContentDealsParams, reqEditors ...RequestEditorFn) (*GetContentDealsResponse, error) {
	rsp, err := c.GetContentDeals(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentDealsResponse(rsp)
}

// GetContentEnsureReplicationDatacidWithResponse request returning *GetContentEnsureReplicationDatacidResponse
func (c *ClientWithResponses) GetContentEnsureReplicationDatacidWithResponse(ctx context.Context, datacid string, reqEditors ...RequestEditorFn) (*GetContentEnsureReplicationDatacidResponse, error) {
	rsp, err := c.GetContentEnsureReplicationDatacid(ctx, datacid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentEnsureReplicationDatacidResponse(rsp)
}

// GetContentFailuresContentWithResponse request returning *GetContentFailuresContentResponse
func (c *ClientWithResponses) GetContentFailuresContentWithResponse(ctx context.Context, content string, reqEditors ...RequestEditorFn) (*GetContentFailuresContentResponse, error) {
	rsp, err := c.GetContentFailuresContent(ctx, content, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentFailuresContentResponse(rsp)
}

// PostContentImportdealWithBodyWithResponse request with arbitrary body returning *PostContentImportdealResponse
func (c *ClientWithResponses) PostContentImportdealWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentImportdealResponse, error) {
	rsp, err := c.PostContentImportdealWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentImportdealResponse(rsp)
}

func (c *ClientWithResponses) PostContentImportdealWithResponse(ctx context.Context, body PostContentImportdealJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentImportdealResponse, error) {
	rsp, err := c.PostContentImportdeal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentImportdealResponse(rsp)
}

// GetContentListWithResponse request returning *GetContentListResponse
func (c *ClientWithResponses) GetContentListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContentListResponse, error) {
	rsp, err := c.GetContentList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentListResponse(rsp)
}

// GetContentReadContWithResponse request returning *GetContentReadContResponse
func (c *ClientWithResponses) GetContentReadContWithResponse(ctx context.Context, cont string, reqEditors ...RequestEditorFn) (*GetContentReadContResponse, error) {
	rsp, err := c.GetContentReadCont(ctx, cont, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentReadContResponse(rsp)
}

// GetContentStagingZonesWithResponse request returning *GetContentStagingZonesResponse
func (c *ClientWithResponses) GetContentStagingZonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContentStagingZonesResponse, error) {
	rsp, err := c.GetContentStagingZones(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentStagingZonesResponse(rsp)
}

// GetContentStatsWithResponse request returning *GetContentStatsResponse
func (c *ClientWithResponses) GetContentStatsWithResponse(ctx context.Context, params *GetContentStatsParams, reqEditors ...RequestEditorFn) (*GetContentStatsResponse, error) {
	rsp, err := c.GetContentStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentStatsResponse(rsp)
}

// GetContentStatusIdWithResponse request returning *GetContentStatusIdResponse
func (c *ClientWithResponses) GetContentStatusIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetContentStatusIdResponse, error) {
	rsp, err := c.GetContentStatusId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentStatusIdResponse(rsp)
}

// GetContentIdWithResponse request returning *GetContentIdResponse
func (c *ClientWithResponses) GetContentIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetContentIdResponse, error) {
	rsp, err := c.GetContentId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentIdResponse(rsp)
}

// PostDealEstimateWithBodyWithResponse request with arbitrary body returning *PostDealEstimateResponse
func (c *ClientWithResponses) PostDealEstimateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDealEstimateResponse, error) {
	rsp, err := c.PostDealEstimateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDealEstimateResponse(rsp)
}

func (c *ClientWithResponses) PostDealEstimateWithResponse(ctx context.Context, body PostDealEstimateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDealEstimateResponse, error) {
	rsp, err := c.PostDealEstimate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDealEstimateResponse(rsp)
}

// GetDealInfoDealidWithResponse request returning *GetDealInfoDealidResponse
func (c *ClientWithResponses) GetDealInfoDealidWithResponse(ctx context.Context, dealid int, reqEditors ...RequestEditorFn) (*GetDealInfoDealidResponse, error) {
	rsp, err := c.GetDealInfoDealid(ctx, dealid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDealInfoDealidResponse(rsp)
}

// GetDealProposalPropcidWithResponse request returning *GetDealProposalPropcidResponse
func (c *ClientWithResponses) GetDealProposalPropcidWithResponse(ctx context.Context, propcid string, reqEditors ...RequestEditorFn) (*GetDealProposalPropcidResponse, error) {
	rsp, err := c.GetDealProposalPropcid(ctx, propcid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDealProposalPropcidResponse(rsp)
}

// GetDealQueryMinerWithResponse request returning *GetDealQueryMinerResponse
func (c *ClientWithResponses) GetDealQueryMinerWithResponse(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*GetDealQueryMinerResponse, error) {
	rsp, err := c.GetDealQueryMiner(ctx, miner, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDealQueryMinerResponse(rsp)
}

// GetDealStatusByProposalPropcidWithResponse request returning *GetDealStatusByProposalPropcidResponse
func (c *ClientWithResponses) GetDealStatusByProposalPropcidWithResponse(ctx context.Context, propcid string, reqEditors ...RequestEditorFn) (*GetDealStatusByProposalPropcidResponse, error) {
	rsp, err := c.GetDealStatusByProposalPropcid(ctx, propcid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDealStatusByProposalPropcidResponse(rsp)
}

// GetDealStatusMinerPropcidWithResponse request returning *GetDealStatusMinerPropcidResponse
func (c *ClientWithResponses) GetDealStatusMinerPropcidWithResponse(ctx context.Context, miner string, propcid string, reqEditors ...RequestEditorFn) (*GetDealStatusMinerPropcidResponse, error) {
	rsp, err := c.GetDealStatusMinerPropcid(ctx, miner, propcid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDealStatusMinerPropcidResponse(rsp)
}

// GetDealTransferInProgressWithResponse request returning *GetDealTransferInProgressResponse
func (c *ClientWithResponses) GetDealTransferInProgressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDealTransferInProgressResponse, error) {
	rsp, err := c.GetDealTransferInProgress(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDealTransferInProgressResponse(rsp)
}

// PostDealTransferStatusWithBodyWithResponse request with arbitrary body returning *PostDealTransferStatusResponse
func (c *ClientWithResponses) PostDealTransferStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDealTransferStatusResponse, error) {
	rsp, err := c.PostDealTransferStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDealTransferStatusResponse(rsp)
}

func (c *ClientWithResponses) PostDealTransferStatusWithResponse(ctx context.Context, body PostDealTransferStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDealTransferStatusResponse, error) {
	rsp, err := c.PostDealTransferStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDealTransferStatusResponse(rsp)
}

// GetDealsFailuresWithResponse request returning *GetDealsFailuresResponse
func (c *ClientWithResponses) GetDealsFailuresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDealsFailuresResponse, error) {
	rsp, err := c.GetDealsFailures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDealsFailuresResponse(rsp)
}

// PostDealsMakeMinerWithBodyWithResponse request with arbitrary body returning *PostDealsMakeMinerResponse
func (c *ClientWithResponses) PostDealsMakeMinerWithBodyWithResponse(ctx context.Context, miner string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDealsMakeMinerResponse, error) {
	rsp, err := c.PostDealsMakeMinerWithBody(ctx, miner, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDealsMakeMinerResponse(rsp)
}

func (c *ClientWithResponses) PostDealsMakeMinerWithResponse(ctx context.Context, miner string, body PostDealsMakeMinerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDealsMakeMinerResponse, error) {
	rsp, err := c.PostDealsMakeMiner(ctx, miner, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDealsMakeMinerResponse(rsp)
}

// GetDealsStatusDealWithResponse request returning *GetDealsStatusDealResponse
func (c *ClientWithResponses) GetDealsStatusDealWithResponse(ctx context.Context, deal int, reqEditors ...RequestEditorFn) (*GetDealsStatusDealResponse, error) {
	rsp, err := c.GetDealsStatusDeal(ctx, deal, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDealsStatusDealResponse(rsp)
}

// GetNetAddrsWithResponse request returning *GetNetAddrsResponse
func (c *ClientWithResponses) GetNetAddrsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNetAddrsResponse, error) {
	rsp, err := c.GetNetAddrs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetAddrsResponse(rsp)
}

// GetPinningPinsWithResponse request returning *GetPinningPinsResponse
func (c *ClientWithResponses) GetPinningPinsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPinningPinsResponse, error) {
	rsp, err := c.GetPinningPins(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPinningPinsResponse(rsp)
}

// PostPinningPinsWithBodyWithResponse request with arbitrary body returning *PostPinningPinsResponse
func (c *ClientWithResponses) PostPinningPinsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPinningPinsResponse, error) {
	rsp, err := c.PostPinningPinsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPinningPinsResponse(rsp)
}

func (c *ClientWithResponses) PostPinningPinsWithResponse(ctx context.Context, body PostPinningPinsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPinningPinsResponse, error) {
	rsp, err := c.PostPinningPins(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPinningPinsResponse(rsp)
}

// DeletePinningPinsPinidWithResponse request returning *DeletePinningPinsPinidResponse
func (c *ClientWithResponses) DeletePinningPinsPinidWithResponse(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*DeletePinningPinsPinidResponse, error) {
	rsp, err := c.DeletePinningPinsPinid(ctx, pinid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePinningPinsPinidResponse(rsp)
}

// GetPinningPinsPinidWithResponse request returning *GetPinningPinsPinidResponse
func (c *ClientWithResponses) GetPinningPinsPinidWithResponse(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*GetPinningPinsPinidResponse, error) {
	rsp, err := c.GetPinningPinsPinid(ctx, pinid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPinningPinsPinidResponse(rsp)
}

// PostPinningPinsPinidWithResponse request returning *PostPinningPinsPinidResponse
func (c *ClientWithResponses) PostPinningPinsPinidWithResponse(ctx context.Context, pinid string, reqEditors ...RequestEditorFn) (*PostPinningPinsPinidResponse, error) {
	rsp, err := c.PostPinningPinsPinid(ctx, pinid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPinningPinsPinidResponse(rsp)
}

// GetPublicByCidCidWithResponse request returning *GetPublicByCidCidResponse
func (c *ClientWithResponses) GetPublicByCidCidWithResponse(ctx context.Context, cid string, reqEditors ...RequestEditorFn) (*GetPublicByCidCidResponse, error) {
	rsp, err := c.GetPublicByCidCid(ctx, cid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicByCidCidResponse(rsp)
}

// GetPublicDealsFailuresWithResponse request returning *GetPublicDealsFailuresResponse
func (c *ClientWithResponses) GetPublicDealsFailuresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicDealsFailuresResponse, error) {
	rsp, err := c.GetPublicDealsFailures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicDealsFailuresResponse(rsp)
}

// GetPublicInfoWithResponse request returning *GetPublicInfoResponse
func (c *ClientWithResponses) GetPublicInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicInfoResponse, error) {
	rsp, err := c.GetPublicInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicInfoResponse(rsp)
}

// GetPublicMetricsDealsOnChainWithResponse request returning *GetPublicMetricsDealsOnChainResponse
func (c *ClientWithResponses) GetPublicMetricsDealsOnChainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicMetricsDealsOnChainResponse, error) {
	rsp, err := c.GetPublicMetricsDealsOnChain(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMetricsDealsOnChainResponse(rsp)
}

// GetPublicMinersWithResponse request returning *GetPublicMinersResponse
func (c *ClientWithResponses) GetPublicMinersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicMinersResponse, error) {
	rsp, err := c.GetPublicMiners(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMinersResponse(rsp)
}

// GetPublicMinersDealsMinerWithResponse request returning *GetPublicMinersDealsMinerResponse
func (c *ClientWithResponses) GetPublicMinersDealsMinerWithResponse(ctx context.Context, miner string, params *GetPublicMinersDealsMinerParams, reqEditors ...RequestEditorFn) (*GetPublicMinersDealsMinerResponse, error) {
	rsp, err := c.GetPublicMinersDealsMiner(ctx, miner, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMinersDealsMinerResponse(rsp)
}

// GetPublicMinersFailuresMinerWithResponse request returning *GetPublicMinersFailuresMinerResponse
func (c *ClientWithResponses) GetPublicMinersFailuresMinerWithResponse(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*GetPublicMinersFailuresMinerResponse, error) {
	rsp, err := c.GetPublicMinersFailuresMiner(ctx, miner, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMinersFailuresMinerResponse(rsp)
}

// GetPublicMinersStatsMinerWithResponse request returning *GetPublicMinersStatsMinerResponse
func (c *ClientWithResponses) GetPublicMinersStatsMinerWithResponse(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*GetPublicMinersStatsMinerResponse, error) {
	rsp, err := c.GetPublicMinersStatsMiner(ctx, miner, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMinersStatsMinerResponse(rsp)
}

// GetPublicMinersStorageQueryMinerWithResponse request returning *GetPublicMinersStorageQueryMinerResponse
func (c *ClientWithResponses) GetPublicMinersStorageQueryMinerWithResponse(ctx context.Context, miner string, reqEditors ...RequestEditorFn) (*GetPublicMinersStorageQueryMinerResponse, error) {
	rsp, err := c.GetPublicMinersStorageQueryMiner(ctx, miner, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMinersStorageQueryMinerResponse(rsp)
}

// GetPublicNetAddrsWithResponse request returning *GetPublicNetAddrsResponse
func (c *ClientWithResponses) GetPublicNetAddrsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicNetAddrsResponse, error) {
	rsp, err := c.GetPublicNetAddrs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicNetAddrsResponse(rsp)
}

// GetPublicNetPeersWithResponse request returning *GetPublicNetPeersResponse
func (c *ClientWithResponses) GetPublicNetPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicNetPeersResponse, error) {
	rsp, err := c.GetPublicNetPeers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicNetPeersResponse(rsp)
}

// GetPublicStatsWithResponse request returning *GetPublicStatsResponse
func (c *ClientWithResponses) GetPublicStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPublicStatsResponse, error) {
	rsp, err := c.GetPublicStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicStatsResponse(rsp)
}

// GetUserApiKeysWithResponse request returning *GetUserApiKeysResponse
func (c *ClientWithResponses) GetUserApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserApiKeysResponse, error) {
	rsp, err := c.GetUserApiKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserApiKeysResponse(rsp)
}

// PostUserApiKeysWithResponse request returning *PostUserApiKeysResponse
func (c *ClientWithResponses) PostUserApiKeysWithResponse(ctx context.Context, params *PostUserApiKeysParams, reqEditors ...RequestEditorFn) (*PostUserApiKeysResponse, error) {
	rsp, err := c.PostUserApiKeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserApiKeysResponse(rsp)
}

// DeleteUserApiKeysKeyWithResponse request returning *DeleteUserApiKeysKeyResponse
func (c *ClientWithResponses) DeleteUserApiKeysKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteUserApiKeysKeyResponse, error) {
	rsp, err := c.DeleteUserApiKeysKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserApiKeysKeyResponse(rsp)
}

// GetUserExportWithResponse request returning *GetUserExportResponse
func (c *ClientWithResponses) GetUserExportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserExportResponse, error) {
	rsp, err := c.GetUserExport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserExportResponse(rsp)
}

// GetUserStatsWithResponse request returning *GetUserStatsResponse
func (c *ClientWithResponses) GetUserStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserStatsResponse, error) {
	rsp, err := c.GetUserStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserStatsResponse(rsp)
}

// ParsePostAdminAutoretrieveInitResponse parses an HTTP response from a PostAdminAutoretrieveInitWithResponse call
func ParsePostAdminAutoretrieveInitResponse(rsp *http.Response) (*PostAdminAutoretrieveInitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminAutoretrieveInitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAdminAutoretrieveListResponse parses an HTTP response from a GetAdminAutoretrieveListWithResponse call
func ParseGetAdminAutoretrieveListResponse(rsp *http.Response) (*GetAdminAutoretrieveListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminAutoretrieveListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAdminPeeringPeersResponse parses an HTTP response from a DeleteAdminPeeringPeersWithResponse call
func ParseDeleteAdminPeeringPeersResponse(rsp *http.Response) (*DeleteAdminPeeringPeersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminPeeringPeersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAdminPeeringPeersResponse parses an HTTP response from a GetAdminPeeringPeersWithResponse call
func ParseGetAdminPeeringPeersResponse(rsp *http.Response) (*GetAdminPeeringPeersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminPeeringPeersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAdminPeeringPeersResponse parses an HTTP response from a PostAdminPeeringPeersWithResponse call
func ParsePostAdminPeeringPeersResponse(rsp *http.Response) (*PostAdminPeeringPeersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminPeeringPeersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAdminPeeringStartResponse parses an HTTP response from a PostAdminPeeringStartWithResponse call
func ParsePostAdminPeeringStartResponse(rsp *http.Response) (*PostAdminPeeringStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminPeeringStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAdminPeeringStatusResponse parses an HTTP response from a GetAdminPeeringStatusWithResponse call
func ParseGetAdminPeeringStatusResponse(rsp *http.Response) (*GetAdminPeeringStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminPeeringStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAdminPeeringStopResponse parses an HTTP response from a PostAdminPeeringStopWithResponse call
func ParsePostAdminPeeringStopResponse(rsp *http.Response) (*PostAdminPeeringStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminPeeringStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAdminSystemConfigResponse parses an HTTP response from a GetAdminSystemConfigWithResponse call
func ParseGetAdminSystemConfigResponse(rsp *http.Response) (*GetAdminSystemConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminSystemConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAdminUsersResponse parses an HTTP response from a GetAdminUsersWithResponse call
func ParseGetAdminUsersResponse(rsp *http.Response) (*GetAdminUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAutoretrieveHeartbeatResponse parses an HTTP response from a PostAutoretrieveHeartbeatWithResponse call
func ParsePostAutoretrieveHeartbeatResponse(rsp *http.Response) (*PostAutoretrieveHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAutoretrieveHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCollectionsResponse parses an HTTP response from a GetCollectionsWithResponse call
func ParseGetCollectionsResponse(rsp *http.Response) (*GetCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CollectionsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCollectionsResponse parses an HTTP response from a PostCollectionsWithResponse call
func ParsePostCollectionsResponse(rsp *http.Response) (*PostCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCollectionsFsAddResponse parses an HTTP response from a PostCollectionsFsAddWithResponse call
func ParsePostCollectionsFsAddResponse(rsp *http.Response) (*PostCollectionsFsAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsFsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCollectionsColuuidResponse parses an HTTP response from a DeleteCollectionsColuuidWithResponse call
func ParseDeleteCollectionsColuuidResponse(rsp *http.Response) (*DeleteCollectionsColuuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCollectionsColuuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCollectionsColuuidResponse parses an HTTP response from a GetCollectionsColuuidWithResponse call
func ParseGetCollectionsColuuidResponse(rsp *http.Response) (*GetCollectionsColuuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionsColuuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCollectionsColuuidResponse parses an HTTP response from a PostCollectionsColuuidWithResponse call
func ParsePostCollectionsColuuidResponse(rsp *http.Response) (*PostCollectionsColuuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsColuuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCollectionsColuuidCommitResponse parses an HTTP response from a PostCollectionsColuuidCommitWithResponse call
func ParsePostCollectionsColuuidCommitResponse(rsp *http.Response) (*PostCollectionsColuuidCommitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCollectionsColuuidCommitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCollectionsColuuidContentsResponse parses an HTTP response from a DeleteCollectionsColuuidContentsWithResponse call
func ParseDeleteCollectionsColuuidContentsResponse(rsp *http.Response) (*DeleteCollectionsColuuidContentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCollectionsColuuidContentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostContentAddResponse parses an HTTP response from a PostContentAddWithResponse call
func ParsePostContentAddResponse(rsp *http.Response) (*PostContentAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContentAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UtilContentAddResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostContentAddCarResponse parses an HTTP response from a PostContentAddCarWithResponse call
func ParsePostContentAddCarResponse(rsp *http.Response) (*PostContentAddCarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContentAddCarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostContentAddIpfsResponse parses an HTTP response from a PostContentAddIpfsWithResponse call
func ParsePostContentAddIpfsResponse(rsp *http.Response) (*PostContentAddIpfsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContentAddIpfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentAggregatedContentResponse parses an HTTP response from a GetContentAggregatedContentWithResponse call
func ParseGetContentAggregatedContentResponse(rsp *http.Response) (*GetContentAggregatedContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentAggregatedContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentAllDealsResponse parses an HTTP response from a GetContentAllDealsWithResponse call
func ParseGetContentAllDealsResponse(rsp *http.Response) (*GetContentAllDealsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentAllDealsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentBwUsageContentResponse parses an HTTP response from a GetContentBwUsageContentWithResponse call
func ParseGetContentBwUsageContentResponse(rsp *http.Response) (*GetContentBwUsageContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentBwUsageContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostContentCreateResponse parses an HTTP response from a PostContentCreateWithResponse call
func ParsePostContentCreateResponse(rsp *http.Response) (*PostContentCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContentCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentDealsResponse parses an HTTP response from a GetContentDealsWithResponse call
func ParseGetContentDealsResponse(rsp *http.Response) (*GetContentDealsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentDealsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentEnsureReplicationDatacidResponse parses an HTTP response from a GetContentEnsureReplicationDatacidWithResponse call
func ParseGetContentEnsureReplicationDatacidResponse(rsp *http.Response) (*GetContentEnsureReplicationDatacidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentEnsureReplicationDatacidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentFailuresContentResponse parses an HTTP response from a GetContentFailuresContentWithResponse call
func ParseGetContentFailuresContentResponse(rsp *http.Response) (*GetContentFailuresContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentFailuresContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostContentImportdealResponse parses an HTTP response from a PostContentImportdealWithResponse call
func ParsePostContentImportdealResponse(rsp *http.Response) (*PostContentImportdealResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContentImportdealResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentListResponse parses an HTTP response from a GetContentListWithResponse call
func ParseGetContentListResponse(rsp *http.Response) (*GetContentListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentReadContResponse parses an HTTP response from a GetContentReadContWithResponse call
func ParseGetContentReadContResponse(rsp *http.Response) (*GetContentReadContResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentReadContResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentStagingZonesResponse parses an HTTP response from a GetContentStagingZonesWithResponse call
func ParseGetContentStagingZonesResponse(rsp *http.Response) (*GetContentStagingZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentStagingZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentStatsResponse parses an HTTP response from a GetContentStatsWithResponse call
func ParseGetContentStatsResponse(rsp *http.Response) (*GetContentStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentStatusIdResponse parses an HTTP response from a GetContentStatusIdWithResponse call
func ParseGetContentStatusIdResponse(rsp *http.Response) (*GetContentStatusIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentStatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetContentIdResponse parses an HTTP response from a GetContentIdWithResponse call
func ParseGetContentIdResponse(rsp *http.Response) (*GetContentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostDealEstimateResponse parses an HTTP response from a PostDealEstimateWithResponse call
func ParsePostDealEstimateResponse(rsp *http.Response) (*PostDealEstimateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDealEstimateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDealInfoDealidResponse parses an HTTP response from a GetDealInfoDealidWithResponse call
func ParseGetDealInfoDealidResponse(rsp *http.Response) (*GetDealInfoDealidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDealInfoDealidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDealProposalPropcidResponse parses an HTTP response from a GetDealProposalPropcidWithResponse call
func ParseGetDealProposalPropcidResponse(rsp *http.Response) (*GetDealProposalPropcidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDealProposalPropcidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDealQueryMinerResponse parses an HTTP response from a GetDealQueryMinerWithResponse call
func ParseGetDealQueryMinerResponse(rsp *http.Response) (*GetDealQueryMinerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDealQueryMinerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDealStatusByProposalPropcidResponse parses an HTTP response from a GetDealStatusByProposalPropcidWithResponse call
func ParseGetDealStatusByProposalPropcidResponse(rsp *http.Response) (*GetDealStatusByProposalPropcidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDealStatusByProposalPropcidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDealStatusMinerPropcidResponse parses an HTTP response from a GetDealStatusMinerPropcidWithResponse call
func ParseGetDealStatusMinerPropcidResponse(rsp *http.Response) (*GetDealStatusMinerPropcidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDealStatusMinerPropcidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDealTransferInProgressResponse parses an HTTP response from a GetDealTransferInProgressWithResponse call
func ParseGetDealTransferInProgressResponse(rsp *http.Response) (*GetDealTransferInProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDealTransferInProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostDealTransferStatusResponse parses an HTTP response from a PostDealTransferStatusWithResponse call
func ParsePostDealTransferStatusResponse(rsp *http.Response) (*PostDealTransferStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDealTransferStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDealsFailuresResponse parses an HTTP response from a GetDealsFailuresWithResponse call
func ParseGetDealsFailuresResponse(rsp *http.Response) (*GetDealsFailuresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDealsFailuresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostDealsMakeMinerResponse parses an HTTP response from a PostDealsMakeMinerWithResponse call
func ParsePostDealsMakeMinerResponse(rsp *http.Response) (*PostDealsMakeMinerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDealsMakeMinerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDealsStatusDealResponse parses an HTTP response from a GetDealsStatusDealWithResponse call
func ParseGetDealsStatusDealResponse(rsp *http.Response) (*GetDealsStatusDealResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDealsStatusDealResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetNetAddrsResponse parses an HTTP response from a GetNetAddrsWithResponse call
func ParseGetNetAddrsResponse(rsp *http.Response) (*GetNetAddrsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNetAddrsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPinningPinsResponse parses an HTTP response from a GetPinningPinsWithResponse call
func ParseGetPinningPinsResponse(rsp *http.Response) (*GetPinningPinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPinningPinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPinningPinsResponse parses an HTTP response from a PostPinningPinsWithResponse call
func ParsePostPinningPinsResponse(rsp *http.Response) (*PostPinningPinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPinningPinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePinningPinsPinidResponse parses an HTTP response from a DeletePinningPinsPinidWithResponse call
func ParseDeletePinningPinsPinidResponse(rsp *http.Response) (*DeletePinningPinsPinidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePinningPinsPinidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPinningPinsPinidResponse parses an HTTP response from a GetPinningPinsPinidWithResponse call
func ParseGetPinningPinsPinidResponse(rsp *http.Response) (*GetPinningPinsPinidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPinningPinsPinidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPinningPinsPinidResponse parses an HTTP response from a PostPinningPinsPinidWithResponse call
func ParsePostPinningPinsPinidResponse(rsp *http.Response) (*PostPinningPinsPinidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPinningPinsPinidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicByCidCidResponse parses an HTTP response from a GetPublicByCidCidWithResponse call
func ParseGetPublicByCidCidResponse(rsp *http.Response) (*GetPublicByCidCidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicByCidCidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicDealsFailuresResponse parses an HTTP response from a GetPublicDealsFailuresWithResponse call
func ParseGetPublicDealsFailuresResponse(rsp *http.Response) (*GetPublicDealsFailuresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicDealsFailuresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicInfoResponse parses an HTTP response from a GetPublicInfoWithResponse call
func ParseGetPublicInfoResponse(rsp *http.Response) (*GetPublicInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicMetricsDealsOnChainResponse parses an HTTP response from a GetPublicMetricsDealsOnChainWithResponse call
func ParseGetPublicMetricsDealsOnChainResponse(rsp *http.Response) (*GetPublicMetricsDealsOnChainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMetricsDealsOnChainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicMinersResponse parses an HTTP response from a GetPublicMinersWithResponse call
func ParseGetPublicMinersResponse(rsp *http.Response) (*GetPublicMinersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMinersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicMinersDealsMinerResponse parses an HTTP response from a GetPublicMinersDealsMinerWithResponse call
func ParseGetPublicMinersDealsMinerResponse(rsp *http.Response) (*GetPublicMinersDealsMinerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMinersDealsMinerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicMinersFailuresMinerResponse parses an HTTP response from a GetPublicMinersFailuresMinerWithResponse call
func ParseGetPublicMinersFailuresMinerResponse(rsp *http.Response) (*GetPublicMinersFailuresMinerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMinersFailuresMinerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicMinersStatsMinerResponse parses an HTTP response from a GetPublicMinersStatsMinerWithResponse call
func ParseGetPublicMinersStatsMinerResponse(rsp *http.Response) (*GetPublicMinersStatsMinerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMinersStatsMinerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicMinersStorageQueryMinerResponse parses an HTTP response from a GetPublicMinersStorageQueryMinerWithResponse call
func ParseGetPublicMinersStorageQueryMinerResponse(rsp *http.Response) (*GetPublicMinersStorageQueryMinerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMinersStorageQueryMinerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicNetAddrsResponse parses an HTTP response from a GetPublicNetAddrsWithResponse call
func ParseGetPublicNetAddrsResponse(rsp *http.Response) (*GetPublicNetAddrsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicNetAddrsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicNetPeersResponse parses an HTTP response from a GetPublicNetPeersWithResponse call
func ParseGetPublicNetPeersResponse(rsp *http.Response) (*GetPublicNetPeersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicNetPeersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPublicStatsResponse parses an HTTP response from a GetPublicStatsWithResponse call
func ParseGetPublicStatsResponse(rsp *http.Response) (*GetPublicStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserApiKeysResponse parses an HTTP response from a GetUserApiKeysWithResponse call
func ParseGetUserApiKeysResponse(rsp *http.Response) (*GetUserApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest [][]MainGetApiKeysResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUserApiKeysResponse parses an HTTP response from a PostUserApiKeysWithResponse call
func ParsePostUserApiKeysResponse(rsp *http.Response) (*PostUserApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MainGetApiKeysResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserApiKeysKeyResponse parses an HTTP response from a DeleteUserApiKeysKeyWithResponse call
func ParseDeleteUserApiKeysKeyResponse(rsp *http.Response) (*DeleteUserApiKeysKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserApiKeysKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserExportResponse parses an HTTP response from a GetUserExportWithResponse call
func ParseGetUserExportResponse(rsp *http.Response) (*GetUserExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserStatsResponse parses an HTTP response from a GetUserStatsWithResponse call
func ParseGetUserStatsResponse(rsp *http.Response) (*GetUserStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UtilHttpError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
